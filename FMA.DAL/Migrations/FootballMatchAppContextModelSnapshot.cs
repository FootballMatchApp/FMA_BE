// <auto-generated />
using System;
using FMA.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMA.DAL.Migrations
{
    [DbContext(typeof(FootballMatchAppContext))]
    partial class FootballMatchAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FMA.DAL.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("MatchPostId")
                        .HasColumnType("int");

                    b.Property<int>("MatchRequestId")
                        .HasColumnType("int");

                    b.Property<int>("PitchId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("MatchPostId");

                    b.HasIndex("MatchRequestId");

                    b.HasIndex("PitchId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("FMA.DAL.Entities.MatchPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MatchTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PitchId")
                        .HasColumnType("int");

                    b.Property<int>("PostById")
                        .HasColumnType("int");

                    b.Property<int?>("PostByTeamId")
                        .HasColumnType("int");

                    b.Property<int>("PostStatus")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("PitchId");

                    b.HasIndex("PostById");

                    b.HasIndex("PostByTeamId");

                    b.ToTable("MatchPosts");
                });

            modelBuilder.Entity("FMA.DAL.Entities.MatchRequest", b =>
                {
                    b.Property<int>("MatchRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchRequestId"));

                    b.Property<DateTime?>("DecisionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MatchPostId")
                        .HasColumnType("int");

                    b.Property<int>("RequestById")
                        .HasColumnType("int");

                    b.Property<int?>("RequestByTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("MatchRequestId");

                    b.HasIndex("MatchPostId");

                    b.HasIndex("RequestById");

                    b.HasIndex("RequestByTeamId");

                    b.ToTable("MatchRequests");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Pitch", b =>
                {
                    b.Property<int>("PitchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PitchId"));

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PricePerHour")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PitchId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Pitches");

                    b.HasData(
                        new
                        {
                            PitchId = 1,
                            ContactNumber = "0123456789",
                            Latitude = 10.762622,
                            Location = "Đại học Bách Khoa – Đại học Quốc gia TP.HCM, quận 10, Thành phố Hồ Chí Minh, Việt Nam.",
                            Longitude = 106.660172,
                            Name = "SAN BONG DA CUC KY DANG CAP",
                            OwnerId = 2,
                            PricePerHour = 300m,
                            Status = 0
                        });
                });

            modelBuilder.Entity("FMA.DAL.Entities.PlayerProfile", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerProfiles");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "PitchOwner"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("FMA.DAL.Entities.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            CreatedBy = 3,
                            Description = "FPT University Football Club",
                            TeamName = "FPT FC"
                        },
                        new
                        {
                            TeamId = 2,
                            CreatedBy = 4,
                            Description = "Thunder Football Club",
                            TeamName = "Thunder FC"
                        });
                });

            modelBuilder.Entity("FMA.DAL.Entities.TeamMember", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId", "PlayerId");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            PlayerId = 1,
                            JoinDate = new DateTime(1990, 1, 1, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            TeamId = 1,
                            PlayerId = 2,
                            JoinDate = new DateTime(1990, 1, 1, 7, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            TeamId = 2,
                            PlayerId = 3,
                            JoinDate = new DateTime(1990, 1, 1, 7, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("FMA.DAL.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "123 Admin Street, Admin City, Admin Country",
                            Email = "admin@gmail.com",
                            PasswordHash = "$2a$11$rTz6DZiEeBqhVrzF25CgTOBPf41jpn2Tg/nnIqnX8KS6uIerB/1dm",
                            PhoneNumber = "0123456789",
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Address = "456 Pitch Owner Street, Pitch Owner City, Pitch Owner Country",
                            Email = "pitchowner@gmail.com",
                            PasswordHash = "$2a$11$rTz6DZiEeBqhVrzF25CgTOBPf41jpn2Tg/nnIqnX8KS6uIerB/1dm",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            Username = "pitchowner"
                        },
                        new
                        {
                            UserId = 3,
                            Address = "789 User1 Street, User1 City, User1 Country",
                            Email = "user-1@gmail.com",
                            PasswordHash = "$2a$11$rTz6DZiEeBqhVrzF25CgTOBPf41jpn2Tg/nnIqnX8KS6uIerB/1dm",
                            PhoneNumber = "1234567890",
                            RoleId = 3,
                            Username = "user1"
                        },
                        new
                        {
                            UserId = 4,
                            Address = "101 User2 Street, User2 City, User2 Country",
                            Email = "user-2@gmail.com",
                            PasswordHash = "$2a$11$rTz6DZiEeBqhVrzF25CgTOBPf41jpn2Tg/nnIqnX8KS6uIerB/1dm",
                            PhoneNumber = "1234567890",
                            RoleId = 3,
                            Username = "user2"
                        },
                        new
                        {
                            UserId = 5,
                            Address = "102 User3 Street, User3 City, User3 Country",
                            Email = "user-3@gmail.com",
                            PasswordHash = "$2a$11$rTz6DZiEeBqhVrzF25CgTOBPf41jpn2Tg/nnIqnX8KS6uIerB/1dm",
                            PhoneNumber = "1234567890",
                            RoleId = 3,
                            Username = "user3"
                        });
                });

            modelBuilder.Entity("FMA.DAL.Entities.UserToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("TokenKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Booking", b =>
                {
                    b.HasOne("FMA.DAL.Entities.MatchPost", "MatchPost")
                        .WithMany()
                        .HasForeignKey("MatchPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMA.DAL.Entities.MatchRequest", "MatchRequest")
                        .WithMany()
                        .HasForeignKey("MatchRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMA.DAL.Entities.Pitch", "Pitch")
                        .WithMany("Bookings")
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MatchPost");

                    b.Navigation("MatchRequest");

                    b.Navigation("Pitch");
                });

            modelBuilder.Entity("FMA.DAL.Entities.MatchPost", b =>
                {
                    b.HasOne("FMA.DAL.Entities.Pitch", "Pitch")
                        .WithMany("MatchPosts")
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMA.DAL.Entities.User", "PostBy")
                        .WithMany()
                        .HasForeignKey("PostById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMA.DAL.Entities.Team", "PostByTeam")
                        .WithMany()
                        .HasForeignKey("PostByTeamId");

                    b.Navigation("Pitch");

                    b.Navigation("PostBy");

                    b.Navigation("PostByTeam");
                });

            modelBuilder.Entity("FMA.DAL.Entities.MatchRequest", b =>
                {
                    b.HasOne("FMA.DAL.Entities.MatchPost", "MatchPost")
                        .WithMany("MatchRequests")
                        .HasForeignKey("MatchPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMA.DAL.Entities.User", "RequestBy")
                        .WithMany()
                        .HasForeignKey("RequestById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMA.DAL.Entities.Team", "RequestByTeam")
                        .WithMany()
                        .HasForeignKey("RequestByTeamId");

                    b.Navigation("MatchPost");

                    b.Navigation("RequestBy");

                    b.Navigation("RequestByTeam");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Pitch", b =>
                {
                    b.HasOne("FMA.DAL.Entities.User", "User")
                        .WithMany("Pitchs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Team", b =>
                {
                    b.HasOne("FMA.DAL.Entities.User", null)
                        .WithMany("Teams")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FMA.DAL.Entities.TeamMember", b =>
                {
                    b.HasOne("FMA.DAL.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FMA.DAL.Entities.User", b =>
                {
                    b.HasOne("FMA.DAL.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FMA.DAL.Entities.UserToken", b =>
                {
                    b.HasOne("FMA.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMA.DAL.Entities.MatchPost", b =>
                {
                    b.Navigation("MatchRequests");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Pitch", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MatchPosts");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Team", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("FMA.DAL.Entities.User", b =>
                {
                    b.Navigation("Pitchs");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
