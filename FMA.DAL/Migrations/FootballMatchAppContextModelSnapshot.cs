// <auto-generated />
using System;
using FMA.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMA.DAL.Migrations
{
    [DbContext(typeof(FootballMatchAppContext))]
    partial class FootballMatchAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FMA.DAL.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<Guid>("MatchPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatchRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PitchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("MatchPostId");

                    b.HasIndex("MatchRequestId");

                    b.HasIndex("PitchId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("FMA.DAL.Entities.MatchPost", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MatchTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PitchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostByTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PostStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReceivingUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PostId");

                    b.HasIndex("PitchId");

                    b.HasIndex("PostById");

                    b.HasIndex("PostByTeamId");

                    b.HasIndex("ReceivingUserId");

                    b.ToTable("MatchPosts");
                });

            modelBuilder.Entity("FMA.DAL.Entities.MatchRequest", b =>
                {
                    b.Property<Guid>("MatchRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DecisionTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MatchPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestByTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("MatchRequestId");

                    b.HasIndex("MatchPostId");

                    b.HasIndex("RequestById");

                    b.HasIndex("RequestByTeamId");

                    b.ToTable("MatchRequests");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Pitch", b =>
                {
                    b.Property<Guid>("PitchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PricePerHour")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PitchId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Pitches");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Team", b =>
                {
                    b.Property<Guid>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FMA.DAL.Entities.TeamMember", b =>
                {
                    b.Property<Guid>("TeamMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TeamMemberId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("FMA.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FMA.DAL.Entities.UserToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("TokenKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Booking", b =>
                {
                    b.HasOne("FMA.DAL.Entities.MatchPost", "MatchPost")
                        .WithMany()
                        .HasForeignKey("MatchPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMA.DAL.Entities.MatchRequest", "MatchRequest")
                        .WithMany()
                        .HasForeignKey("MatchRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMA.DAL.Entities.Pitch", "Pitch")
                        .WithMany("Bookings")
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MatchPost");

                    b.Navigation("MatchRequest");

                    b.Navigation("Pitch");
                });

            modelBuilder.Entity("FMA.DAL.Entities.MatchPost", b =>
                {
                    b.HasOne("FMA.DAL.Entities.Pitch", "Pitch")
                        .WithMany("MatchPosts")
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMA.DAL.Entities.User", "PostBy")
                        .WithMany()
                        .HasForeignKey("PostById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMA.DAL.Entities.Team", "PostByTeam")
                        .WithMany()
                        .HasForeignKey("PostByTeamId");

                    b.HasOne("FMA.DAL.Entities.User", "ReceivingUser")
                        .WithMany()
                        .HasForeignKey("ReceivingUserId");

                    b.Navigation("Pitch");

                    b.Navigation("PostBy");

                    b.Navigation("PostByTeam");

                    b.Navigation("ReceivingUser");
                });

            modelBuilder.Entity("FMA.DAL.Entities.MatchRequest", b =>
                {
                    b.HasOne("FMA.DAL.Entities.MatchPost", "MatchPost")
                        .WithMany("MatchRequests")
                        .HasForeignKey("MatchPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMA.DAL.Entities.User", "RequestBy")
                        .WithMany()
                        .HasForeignKey("RequestById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMA.DAL.Entities.Team", "RequestByTeam")
                        .WithMany()
                        .HasForeignKey("RequestByTeamId");

                    b.Navigation("MatchPost");

                    b.Navigation("RequestBy");

                    b.Navigation("RequestByTeam");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Pitch", b =>
                {
                    b.HasOne("FMA.DAL.Entities.User", "User")
                        .WithMany("Pitchs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Team", b =>
                {
                    b.HasOne("FMA.DAL.Entities.User", "CreateBy")
                        .WithMany("Teams")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("FMA.DAL.Entities.TeamMember", b =>
                {
                    b.HasOne("FMA.DAL.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FMA.DAL.Entities.User", b =>
                {
                    b.HasOne("FMA.DAL.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FMA.DAL.Entities.UserToken", b =>
                {
                    b.HasOne("FMA.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FMA.DAL.Entities.MatchPost", b =>
                {
                    b.Navigation("MatchRequests");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Pitch", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MatchPosts");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FMA.DAL.Entities.Team", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("FMA.DAL.Entities.User", b =>
                {
                    b.Navigation("Pitchs");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
